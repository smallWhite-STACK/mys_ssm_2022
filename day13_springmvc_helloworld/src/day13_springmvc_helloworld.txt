1.MVC

    1.1MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分
    M：Model，模型层，指工程中的JavaBean，作用是处理数据
    V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据
    C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器

    1.2JavaBean分为两类：
    - 一类称为实体类Bean：专门存储业务数据的，如 Student、User 等
    - 一类称为业务处理Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。

    1.3MVC的工作流程：
        用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，
        Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，
        Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器

2.SpringMVC
    2.1三层架构
        表述层（或表示层）(表述层表示前台页面和后台servlet)
        业务逻辑层、
        数据访问层，
    2.2SpringMVC 是 Spring 为$表述层$开发提供的一整套完备的解决方案
        在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，
        目前业界普遍选择了 SpringMVC 作为 Java EE 项目$表述层$开发的*首选方案*。

3.helloworld实验：
    1.创建maven工程，然后在pron.xml中加入
        <packaging>war</packaging>
        此时该模块会自动添加Web模块
    2.设置Web的web.xml
        注意：IDEA给的路径如下：不对
            D:\UserIntellijIDEA\mys_ssm_2022\day13_springmvc_helloworld\WEB-INF\web.xml
            应改为：
            D:\UserIntellijIDEA\mys_ssm_2022\day13_springmvc_helloworld\src\main\webapp\WEB-INF\web.xml
            因此此时的文件结构中：src/main/java|resources|webapp
            weapp中是WEB-INF（注意WEB-INF下的页面只能通过转发来访问哦！！！）
    3.引入依赖
        springMVC会将spring中的所有依赖都导入
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.3.1</version>
        日志
            （slf4j(simple logger fascade for java(沙拉风)是一个日志门面，内部都是接口
            而logback就是沙拉风日志门面的实现
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        servletAPI
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        spring5和thymeleaf整合包
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf-spring5</artifactId>
            <version>3.0.12.RELEASE</version>

    4.配置web.xml
        为什么要配置web.xml因为：
            springMVC是基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一处理
            在javaweb阶段，我们自己写一个serlvet就需要去web.xml中注册一下
            这里我们需要将DispatcherServlet注册进去
        格式：
            <servlet>
                <servlet-name>
                <servlet-class>

            <servlet-mapping>
                <servlet-name>
                <url-pattern>
        如何配置：
            <servlet>
                <servlet-name>SpringMVC</servlet-name>
                <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
            </servlet>
            <servlet-mapping>
                <servlet-name>SpringMVC</servlet-name>
                <url-pattern>/</url-pattern>
            </servlet-mapping>
         注意：
            - /匹配浏览器向服务器发送的请求

            - 设置springMVC的核心控制器所能处理的请求的请求路径url-pattern
            /所匹配的请求可以是/login或.html或.js或.css方式的请求路径
            但是/不能匹配.jsp请求路径的请求
            但是/*可以匹配.jsp，但是DispatcherServlet不能处理.jsp，所以我们只需设置/即可
    5.创建请求控制器controller(HelloController.java)
        @Controller
        public class HelloController
    6.创建SpringMVC的配置文件
        SpringMVC的配置文件是DispatcherServlet初始化的时候完成加载，
        因此xml的名字和位置是固定的（后面将xml卸载resources中，名字可以自定义）
            名字：<servlet-name>-servlet.xml即：SpringMVC-servlet.xml
            位置：web-app\WEB-INF下
    7.配置SpringMVC-servlet.xml(☆)
        扫描控制层组件(☆)
        配置Thymeleaf视图解析器(☆)
    8.创建WEB-INF下的templates文件夹
        因为在SpringMVC-servlet.xml的Thymeleaf视图解析器中配置的路径决定的
    9.测试
    先配置Tocmat:我们在deployment时选择的是war exploded，
                Application Context：自定义即可(因为一个Tocmat可以有多个工程，而该路径对应不同的工程 )
                然后到server设置下：URL为http://localhost:8080/ApplicationContext/

    ①实现对首页的访问
        注意：
            - 按照javaweb思想，controller内的所有方法都是返回字符串，然后让DispatcherServlet处理
        处理：
            - 1.在HelloController.java组件中处理请求，添加处理方法
            - 2.使用注解@RequestMapping("/")修饰处理的方法，
                "/"含义：绝对路径，即被服务器解析为Tocmat的url  http://localhost:8080/ApplicationContext/
    关于html file的模板设置：因为经常用thymeleaf，因此我们把：
        <html lang="en" xmlns:th="http://www.thymeleaf.org">加入模板中


4.关于web.xml中的<init-param> 、<load-on-startup>
    1.首先，我们需要知道src\main下的java和resourdes的内容最终都会在WEB-INF下的classes文件夹下。
    2.在上面的操作中，我们是将SpringMVC-servlet.xml放在WEB-INF下，但是一般需要放在resources文件夹下，
        所以：我们在web.xml中设置
                <servlet-name>
                <servlet-class>
                    设置springmvc.xml配置文件的位置和名称
                <init-param>
                    <param-name>contextConfigLocation</param-name>
                        使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources
                    <param-value>classpath:springmvc.xml</param-value>
    3. <load-on-startup>1</load-on-startup> 将DispatcherServlet的初始化时间提前到服务器启动时
        默认servlet的初始化是在我们第一次启动时
        作为框架的核心组件，在启动过程中有大量的初始化操作要做
            而这些操作放在第一次请求时才执行会严重影响访问速度
            因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时
    4.关于DispatcherServlet
        Servlet(接口)--GenericServlet--HttpServlet--HttpServletBean--FrameworkServlet--DispatcherServlet
        我们通过Servlet开始想后找，找到HttpServletBean的init中调用了initServletBean，而HttpServletBean中是空的，因此
        我们到FrameworkServlet去看initServletBean方法，其内部有两句代码：
            this.webApplicationContext = this.initWebApplicationContext(); //ioc初始化
            this.initFrameworkServlet();
        而initFrameworkServlet内部是空的，我们就去DispatcherServlet去看initFrameworkServlet的实现
        但是我们发现DispatcherServlet没有重写initFrameworkServlet，因此我们拐回去看
        FrameworkServlet去看initWebApplicationContext，内部有一句：this.onRefresh(wac);但是onRefresh没有写，因此
        我们再次来到DispatcherServlet查看onRefresh，然后找到initStrategies，其内部有很多方法调用
        这些方法调用就需要花费一些时间（例如我们在运行tocmat的初始页面时时间较长），
        因此我们希望DispatcherServlet不要再在第一次访问时初始化，而是使用load-on-startup提前到tocmat启动时.

    CTRL+H 查看 利用 idea 快捷键 查看 hierarchy

5.总结
    web.xml
    <servlet-name>-servlet.xml
    @Controller
    <init-params>
    contextConfigLocation
    @RequestMapping(value="")
    load-on-startup

6.关于thymeleaf在springMVC中的配置
    需要注意：视图前缀和后缀的设置
                    <!-- 视图前缀 -->
                    <property name="prefix" value="/WEB-INF/templates/"/>
                    <!-- 视图后缀 -->
                    <property name="suffix" value=".html"/>


    <!-- 配置Thymeleaf视图解析器 -->
        <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
            <property name="order" value="1"/>
            <property name="characterEncoding" value="UTF-8"/>
            <property name="templateEngine">
                <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                    <property name="templateResolver">
                        <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                            <!-- 视图前缀 -->
                            <property name="prefix" value="/WEB-INF/templates/"/>
                            <!-- 视图后缀 -->
                            <property name="suffix" value=".html"/>
                            <property name="templateMode" value="HTML5"/>
                            <property name="characterEncoding" value="UTF-8" />
                        </bean>
                    </property>
                </bean>
            </property>
    </bean>



