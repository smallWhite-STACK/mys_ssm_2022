6.注解配置SpringMVC: 使用配置类和注解代替web.xml和SpringMVC配置文件的功能
    1)创建初始化类，代替web.xml
    2)创建SpringConfig配置类，代替spring的配置文件
    3)创建WebConfig配置类，代替SpringMVC的配置文件

在Servlet3.0环境中，容器会在`类路径`中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器(Tocmat)。
Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。
Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，

当我们的类扩展(继承)了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。

6.1 实验
 1.WebInit(自定义名字主要继承AbstractAnnotationConfigDispatcherServletInitializer即可).java(代替web.xml)
    1.首先web.xml中实现的功能：
        a)过滤器：设置编码、创建处理请求方式的过滤器(通过post实现put和delete的HiddenHttpMethodFilter)
        b)DispatcherServlet视图解析器
        要注意a和b中各自的参数配置问题
    2.必须重写三个方法：
        getRootConfigClasses   -->设置一个配置类代替Spring的配置文件
        getServletConfigClasses-->设置一个配置类代替SpringMVC的配置文件
        getServletMappings     -->设置SpringMVC的前端控制器DispatcherServlet的url-pattern
    3.设置过滤器（重写）
        getServletFilters      -->设置当前的过滤器
 2.SpringConfig.java(代替spring)（整合时再配置）
    1.需要将类标识为配置类
        @Configuration

 3.WebConfig（实现接口：WebMvcConfigurer）(代替springmvc)
    1.springmvc.xml实现的功能
         1.扫描
         2.thymeleaf视图解析器
         3.开启mvc的注解驱动
         4.默认的servlet
         5.视图控制器
         6.异常处理
         7.文件上传解析器
         8.拦截器
    2.实现：
        1.注解@Configuration将类标识为配置类
        2.@ComponentScan扫描组件
          @ComponentScan("com.atguigu.controller")
        3.@EnableWebMvc开启mvc的注解驱动
        4.其他功能（默认的servlet、异常处理、拦截器）需要自己去找对应的方法名
          4.1默认的servlet：
                只需要设置configurer.enable();
          4.2异常处理：
                 public void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) {
                        //假设我们处理算术异常
                        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();
                        Properties properties = new Properties();
                        properties.setProperty("java.lang.ArithmeticException", "error");
                        exceptionResolver.setExceptionMappings(properties);
                        exceptionResolver.setExceptionAttribute("ex");
                        resolvers.add(exceptionResolver);
                    }
          4.3拦截器：
                public void addInterceptors(InterceptorRegistry registry) {
                        FirstInterceptor firstInterceptor = new FirstInterceptor();
                        registry.addInterceptor(firstInterceptor);
                    }
          4.4视图控制器
                registry.addViewController("/").setViewName("index");


        5.@Bean注册文件上传解析器（CommonsMultipartResolver）
          Bean注解可以将标识的方法的返回值作为bean进行管理
            自定义方法，但是返回值需要设置为 CommonsMultipartResolver，该方法的方法名相当于在xml中配置的id
            @Bean
                public CommonsMultipartResolver multipartResolver(){
                    return new CommonsMultipartResolver();
                }

        6.thymeleaf视图解析器的设置（需要三个@bean）
            //配置生成模板解析器
                @Bean
                public ITemplateResolver templateResolver() {
                    WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();
                    // ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得
                    ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver(
                            webApplicationContext.getServletContext());
                    templateResolver.setPrefix("/WEB-INF/templates/");
                    templateResolver.setSuffix(".html");
                    templateResolver.setCharacterEncoding("UTF-8");
                    templateResolver.setTemplateMode(TemplateMode.HTML);
                    return templateResolver;
                }

                //生成模板引擎并为模板引擎注入模板解析器
                @Bean
                public SpringTemplateEngine templateEngine(ITemplateResolver templateResolver) {
                    SpringTemplateEngine templateEngine = new SpringTemplateEngine();
                    templateEngine.setTemplateResolver(templateResolver);
                    return templateEngine;
                }

                //生成视图解析器并未解析器注入模板引擎
                @Bean
                public ViewResolver viewResolver(SpringTemplateEngine templateEngine) {
                    ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();
                    viewResolver.setCharacterEncoding("UTF-8");
                    viewResolver.setTemplateEngine(templateEngine);
                    return viewResolver;
                }

6.2具体代码：
    WebInit
        /**
         * @author xujian
         * @create 2023-01-16 9:16
         * a)过滤器：设置编码、通过post实现put和delete的HiddenHttpMethodFilter
         * b)DispatcherServlet视图解析器
         *
         * 要注意a和b中各自的参数配置问题
         */
        public class WebInit extends AbstractAnnotationConfigDispatcherServletInitializer {

            @Override
            //代替spring
            protected Class<?>[] getRootConfigClasses() {
                return new Class[]{SpringConfig.class};
            }

            @Override
            //代替springmvc
            protected Class<?>[] getServletConfigClasses() {
                return new Class[]{WebConfig.class};
            }

            @Override
            //设置前端控制器的url-pattern
            protected String[] getServletMappings() {
                return new String[]{"/"};
            }

            @Override
            protected Filter[] getServletFilters() {
                CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();
                characterEncodingFilter.setEncoding("utf-8");
                characterEncodingFilter.setForceEncoding(true);

                HiddenHttpMethodFilter hiddenHttpMethodFilter = new HiddenHttpMethodFilter();
                return new Filter[]{characterEncodingFilter,hiddenHttpMethodFilter};
            }
        }
    2.SpringConfig
        @Configuration
        public class SpringConfig {
        }
    3.package com.atguigu.config;

      import com.atguigu.interceptor.FirstInterceptor;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.ComponentScan;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.web.context.ContextLoader;
      import org.springframework.web.context.WebApplicationContext;
      import org.springframework.web.multipart.commons.CommonsMultipartResolver;
      import org.springframework.web.servlet.HandlerExceptionResolver;
      import org.springframework.web.servlet.ViewResolver;
      import org.springframework.web.servlet.config.annotation.*;
      import org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;
      import org.thymeleaf.spring5.SpringTemplateEngine;
      import org.thymeleaf.spring5.view.ThymeleafViewResolver;
      import org.thymeleaf.templatemode.TemplateMode;
      import org.thymeleaf.templateresolver.ITemplateResolver;
      import org.thymeleaf.templateresolver.ServletContextTemplateResolver;

      import java.util.List;
      import java.util.Properties;

      /**
       * @author xujian
       * @create 2023-01-16 9:28
       * Springmvc.xml实现的功能
       *
       * 1.扫描
       * 2.thymeleaf视图解析器
       * 3.开启mvc的注解驱动
       * 4.默认的servlet
       * 5.视图控制器
       * 6.异常处理
       * 7.文件上传解析器
       * 8.拦截器
       */
      @Configuration
      @ComponentScan("com.atguigu.controller")
      @EnableWebMvc
      public class WebConfig implements WebMvcConfigurer {

          @Override
          // <mvc:default-servlet-handler />
          public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
              configurer.enable();
          }

          @Override
          public void addViewControllers(ViewControllerRegistry registry) {
              registry.addViewController("/").setViewName("index");

          }

          @Bean
          public CommonsMultipartResolver multipartResolver(){
              return new CommonsMultipartResolver();
          }

          @Override
          public void addInterceptors(InterceptorRegistry registry) {
              FirstInterceptor firstInterceptor = new FirstInterceptor();
              registry.addInterceptor(firstInterceptor).addPathPatterns("/**");
          }

          @Override
          public void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) {
              //假设我们处理算术异常
              SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();
              Properties properties = new Properties();
              properties.setProperty("java.lang.ArithmeticException", "error");
              exceptionResolver.setExceptionMappings(properties);
              exceptionResolver.setExceptionAttribute("ex");
              resolvers.add(exceptionResolver);
          }
          //配置生成模板解析器
          @Bean
          public ITemplateResolver templateResolver() {
              WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();
              // ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得
              ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver(
                      webApplicationContext.getServletContext());
              templateResolver.setPrefix("/WEB-INF/templates/");
              templateResolver.setSuffix(".html");
              templateResolver.setCharacterEncoding("UTF-8");
              templateResolver.setTemplateMode(TemplateMode.HTML);
              return templateResolver;
          }

          //生成模板引擎并为模板引擎注入模板解析器
          @Bean
          public SpringTemplateEngine templateEngine(ITemplateResolver templateResolver) {
              SpringTemplateEngine templateEngine = new SpringTemplateEngine();
              templateEngine.setTemplateResolver(templateResolver);
              return templateEngine;
          }

          //生成视图解析器并未解析器注入模板引擎
          @Bean
          public ViewResolver viewResolver(SpringTemplateEngine templateEngine) {
              ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();
              viewResolver.setCharacterEncoding("UTF-8");
              viewResolver.setTemplateEngine(templateEngine);
              return viewResolver;
          }
      }

-----------------------------------------------------------------------------
7.## SpringMVC常用组件
  - DispatcherServlet：前端控制器，不需要工程师开发，由框架提供
        > 作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求
  - HandlerMapping：处理器映射器，不需要工程师开发，由框架提供
        > 作用：根据请求的url、method等信息查找Handler，即控制器方法
  - Handler：处理器，需要工程师开发
        > 作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理
  - HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供
        > 作用：通过HandlerAdapter对处理器（控制器方法）进行执行
  - ViewResolver：视图解析器，不需要工程师开发，由框架提供
        > 作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView
  - View：视图，需要工程师开发
        > 作用：将模型数据通过页面展示给用户


7.2 Servlet的一般方法：
    1.初始化 void init(ServletConfig var1) throws ServletException;
    2.ServletConfig getServletConfig();
    3.void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;
    4.String getServletInfo();
    5.void destroy();

8.DispatcherServlet初始化过程
    - DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet生命周期来进行调度。
    - 继承关系：
        DispatcherServlet.java         protected void onRefresh(ApplicationContext context)
        FrameworkServlet.java          protected final void initServletBean()   protected void initFrameworkServlet()
        HttpServletBean.java           public final void init()     -->         protected void initServletBean()
        HttpServlet.java
        GenericServlet.java            void init(ServletConfig config)          public void init()（并且重载一个空参的init()）
        Servlet.java（接口）            void init(ServletConfig config)
    - 要想查看初始过程，我们需要从Servlet的init入手一致看到DispatcherServlet
        按照上面出现的方法，我们一直看到，FrameworkServlet中的protected final void initServletBean()，其中有：
            this.webApplicationContext = this.initWebApplicationContext();
            this.initFrameworkServlet(); //这个方法没有内容，而且DispatcherServlet也没有重写，因此我们主要关注上一行代码
        这句代码就是ioc的初始化，因此我们之前说我们springmvc配置文件初始化是在DispatcherServlet的初始化过程中完成的，也就是在服务器启动时完成的

        我们进入initWebApplicationContext方法中：
             1）if (wac == null) {
                        wac = this.findWebApplicationContext();
                    }

                    if (wac == null) {
                        wac = this.createWebApplicationContext(rootContext);
                    }
                    如果ico(wac)为null,则取find，若找不到，就创建，我们再进入createWebApplicationContext
                        protected WebApplicationContext createWebApplicationContext(@Nullable ApplicationContext parent)
                            其内部有一句：
                                    ConfigurableWebApplicationContext wac = (ConfigurableWebApplicationContext)BeanUtils.instantiateClass(contextClass);
                                    wac.setEnvironment(this.getEnvironment());
                                    wac.setParent(parent);
                            这就是创建爱你ioc容器的，注意wac.setParent(parent);设置一个父容器，因为springmvc的ioc容器的父容器是spring的ioc容器
             2）this.onRefresh(wac);
                刷新ioc容器
                这个onRefresh需要子类重写,我们进入DispatcherServlet中
                        protected void onRefresh(ApplicationContext context) {
                                this.initStrategies(context);
                            }
                    我们进入 initStrategies（初始化策略）中：（初始化策略，即初始化DispatcherServlet的各个组件所在类：）

                            this.initMultipartResolver(context);初始化文件上传解析器的
                            this.initLocaleResolver(context);
                            this.initThemeResolver(context);
                            this.initHandlerMappings(context);  处理器映射器（通过浏览器发送的信息匹配控制器方法）
                            this.initHandlerAdapters(context); 处理器适配器（调用控制器方法）
                            this.initHandlerExceptionResolvers(context);异常解析器
                            this.initRequestToViewNameTranslator(context);
                            this.initViewResolvers(context);  视图解析器
                            this.initFlashMapManager(context);

             3）this.getServletContext().setAttribute(attrName, wac);
                将ioc容器（在应用域中进行共享）共享到最大的域对象中ServletContext

9.DispatcherServlet处理请求（service）的过程
    - 继承关系：
        DispatcherServlet.java      protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {
                                    protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {

        FrameworkServlet.java       protected void service(HttpServletRequest request, HttpServletResponse response)
                                    protected final void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                                    protected abstract void doService(HttpServletRequest var1, HttpServletResponse var2) throws Exception;

        HttpServletBean.java
        HttpServlet.java            public void service(ServletRequest req, ServletResponse res)            protected void service(HttpServletRequest req, HttpServletResponse resp)
        GenericServlet.java         public abstract void service(ServletRequest var1, ServletResponse var2)
        Servlet.java（接口）         void service(ServletRequest var1, ServletResponse var2)

    - 我们发现Servlet定义了service方法，GenericServlet将service设置为抽象方法，HttpServlet则重写了service
    并且HttpServlet还设置了一个重载的service方法
            重写的：if (req instanceof HttpServletRequest && res instanceof HttpServletResponse) {
                        HttpServletRequest request = (HttpServletRequest)req;
                        HttpServletResponse response = (HttpServletResponse)res;
                        this.service(request, response);
            重载的：protected void service(HttpServletRequest req, HttpServletResponse resp)
                    在内部中个，首先获取请求的方式
                        如果为get，则调用doGet
                        如果为post，则调用doPost
                        如果为head，则调用doHead
                        如果为put，则调用doPut
                        如果为delete，则调用doDelete
                        ....
    - 之后HttpServletBean使用父类的service,在FrameworkServlet中重写了HttpServlet的重载方法service
        判断请求 是否为PARCH 或者 是否为null,
        - 若不为patch且不为null,则执行父类的service即（HttpServlet的重载方法service）
        - 若为patch或者null,则processRequest(执行请求)
                HttpMethod httpMethod = HttpMethod.resolve(request.getMethod());
                if (httpMethod != HttpMethod.PATCH && httpMethod != null) {
                    super.service(request, response);//去看HttpServlet的重载方法service
                } else {
                    this.processRequest(request, response);
                }
    - 在FrameworkServlet中还重写了doGet,doPost,doHead,doPut,doDelete,doOptions,doTrace
    因此，尽管我们在FrameworkServlet中调用了super.service，但是由于其重写了上述方法，因此父类的service（HttpServlet的重载方法service）
    将调用的doGet,doPost等方法是FrameworkServlet重写的

    - 并且重写的doGet,doPost,doHead,doPut,doDelete,doOptions,doTrace中都是
        this.processRequest(request, response);
        因此在FrameworkServlet中不管请求方式为哈，最终都是processRequest
        因此我们进入processRequest中，其调用了this.doService(request, response);
        但是doService为空，因此我们去DispatcherServlet中看doService
    - DispatcherServlet中看doService，
        其中有这样一句代码：
            this.doDispatch(request, response);
        我们进入doDispatch中：这内部就是我们之前在测试拦截器等。
---------------------------------------------------------------------------------------------------------------------------
10.SpringMVC的执行流程
 1) 用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。
 2) DispatcherServlet对请求URL（统一资源定位符）进行解析，得到请求URI（资源标识符，资源在服务器的位置），判断请求URI对应的映射：
    a) 不存在
        i. 再判断是否配置了mvc:default-servlet-handler
        ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误
        iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误
    b) 存在则执行下面的流程

 3) 根据该URI，调用HandlerMapping（处理器映射器）获得该Handler配置的所有相关的对象--HandlerExecutionChain mappedHandler（包括Handler对象以及Handler对象对应的拦截器），
    HandlerExecutionChain处理器执行链对象中包含三个东西：handler对象（控制器方法）、拦截器集合、拦截器索引
    最后以HandlerExecutionChain执行链对象（-->处理器器方法）的形式返回。
 4) DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter（处理（控制）器适配器）。
 5) 如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】
 6) 提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：
    a) HttpMessageConveter（报文信息转换器）： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息
    b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等
    c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等
    d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中
 7) Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。
 8) 此时将开始执行拦截器的postHandle(...)方法【逆向】。
 9) 根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。
 10) 渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。
 11) 将渲染结果返回给客户端。